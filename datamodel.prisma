type User {
  id: ID! @id
  avatar: String  @default(
      value: "https://scontent-hkg3-1.cdninstagram.com/vp/51ea9f9……74447047_1561961433825017856_n.jpg?_nc_ht=scontent-hkg3-1.cdninstagram.com"
    )
  storyImg: String
  charHomeImg: String 
  storeImg: String
  userName: String! @unique
  email: String! @unique
  nickName: String!
  password: String
  account: [Account] @relation(name: "AccountOfUser")
  zipCode: String
  address: String
  addressDetail: String
  phone: String
  products: [Product!]! @relation(name: "ProductOfUser", onDelete: CASCADE)
  funding: [Funding!]!@relation(name: "FundingOfUser", onDelete: CASCADE)
  cart: [Cart!]! @relation(name: "UserOfCart", onDelete: CASCADE)
  payment: [Payment!]! @relation(name: "UserOfPayment", onDelete: CASCADE)
  buyList: [BuyList!]! @relation(name: "UserOfBuyList", onDelete: CASCADE)
  isFollowing: Boolean
  isSelf: Boolean
  bio: String
  tag1: String
  tag2: String
  tag3: String
  tags: [Tag!]! @relation(name: "TagsOfUser", onDelete: CASCADE)
  following: [User!]! @relation(name: "FollowRelation")
  followers: [User!]! @relation(name: "FollowRelation")
  posts: [Post!]! @relation(name: "PostsOfUser", onDelete: CASCADE)
  postsCount: Int
  wikiposts: [WikiPost!]! @relation(name: "WikiPostsOfUser", onDelete: CASCADE)
  wikipostsCount: Int
  members: [Member!]! @relation(name: "MembersOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
  rooms: [Room!]! 
  blocks: [Block!] @relation(name:"Creator")
  contracts: [Contract] @relation(name:"ContractOfUser")
  collection: [Block!] @relation(name:"Collectors")
  seats: [Seat] @relation(name:"SeatOfUser")
  loginSecret: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  name: String! 
  user: User! @relation(name: "ProudctOfUser")
  price: Int! 
  mainCategory: String! 
  subCategory: String!
  thumbnail: String
  title: String
  text: String
  productFiles: [ProductFile!] @relation(name: "ProductFileOfProduct", onDelete: CASCADE)
  options: [Option!] @relation(name: "ProductOfOption", onDelete: CASCADE)
  numberOfSales: Int! @default(value: 0)
  tags: [Tag!]! @relation(name: "TagOfProduct", onDelete: CASCADE)
  likes: [Like!]! @relation(name:"LikeOfProduct", onDelete: CASCADE)
  commentproduct: [CommentProduct!]! @relation(name: "CommentProudctOfProduct", onDelete: CASCADE)
  cart: [Cart!]! @relation(name: "ProductOfCart", onDelete: CASCADE)
  buyList: [BuyList!]! @relation(name: "ProductOfBuyList", onDelete: CASCADE)
  payment: [Payment!]! @relation(name: "ProductOfPayment", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
} 

type ProductFile {
  id: ID! @id
  url: String! 
  product: Product! @relation(name: "ProductFileOfProduct")
}

type Funding {
  id: ID! @id
  name: String! 
  user: User! @relation(name: "FundingOfUser")
  price: Int! 
  text: String
  targetAmount: Int!
  dueDate: DateTime
  currentAmount: Int 
  numberOfParticipants: Int! @default(value: 0)
  mainCategory: String! 
  subCategory: String!
  thumbnail: String
  fundingFiles: [FundingFile!] @relation(name: "FundingFileOfFunding", onDelete: CASCADE)
  block: [Block] @relation(name:"BlockOfFunding", onDelete: CASCADE)
  options: [Option!] @relation(name: "FundingOfOption", onDelete: CASCADE)
  tags: [Tag!]! @relation(name: "TagOfFunding", onDelete: CASCADE)
  likes: [Like!]! @relation(name:"LikeOfFunding", onDelete: CASCADE)
  cart: [Cart!]! @relation(name: "FundingOfCart", onDelete: CASCADE)
  buyList: [BuyList!]! @relation(name: "FundingOfBuyList", onDelete: CASCADE)
  payment: [Payment!]! @relation(name: "FundingOfPayment", onDelete: CASCADE)
  contract: [Contract] @relation(name:"ContractOfFunding")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type FundingFile {
  id: ID! @id
  url: String! 
  funding: Funding! @relation(name: "FundingFileOfFunding")
}

type AdminFile {
  id: ID! @id
  url: String!
}

type Option {
  id: ID! @id
  optionName: String! @default(value:"")
  optionprice: Int @default(value:0)
  optiontext: String @default(value:"")
  product: Product @relation(name:"ProductOfOption")
  funding: Funding @relation(name:"FundingOfOption")
  cart: [Cart!] @relation(name: "CartOfOption")
  payment: [Payment!] @relation(name: "PaymentOfOption")
  buyList: [BuyList!] @relation(name:"BuyListOfOption")
}

type Count {
  id: ID! @id
  count: Int! 
  cart: [Cart!] @relation(name: "CartOfCount")
  payment: [Payment!]! @relation(name: "PaymentOfCount")
}

type Cart {
  id: ID! @id
  user: User! @relation(name: "UserOfCart")
  funding: [Funding] @relation(name:"FundingOfCart")
  product: [Product] @relation(name: "ProductOfCart")
  options: [Option!]! @relation(name: "CartOfOption")
  count: [Count!]! @relation(name: "CartOfCount", onDelete: CASCADE)
  pcount: Int! @default(value:0)
  payment: [Payment!] @relation(name: "PaymentOfCart")
}

type Quantity {
  id: ID! @id
  quantity: Int!
  buyList: [BuyList!]! @relation(name:"BuyListOfQuanitity")
}

type BuyList {
  id: ID! @id
  user: User! @relation(name: "UserOfBuyList")
  product: [Product!]! @relation(name: "ProductOfBuyList")
  options: [Option!] @relation(name:"BuyListOfOption")
  quantity: [Quantity!]! @relation(name:"BuyListOfQuanitity")
}

type Payment {
  id: ID! @id
  user: User! @relation(name: "UserOfPayment")
  funding: [Funding] @relation(name: "FundingOfPayment") 
  product: [Product] @relation(name: "ProductOfPayment")
  options: [Option!] @relation(name: "PaymentOfOption")
  count: [Count!]! @relation(name: "PaymentOfCount")
  amount: Int!
  cart: [Cart!] @relation(name: "PaymentOfCart")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Post {
  id: ID! @id
  title: String!
  caption: String!
  user: User! @relation(name: "PostsOfUser")
  thumbnail: String 
  files: [File] @relation(name: "FilesOfPost", onDelete: CASCADE)
  likes: [Like!]! @relation(name:"LikeOfPost", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsOfPost", onDelete: CASCADE)
  tags: [Tag!]! @relation(name: "TagOfPost", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type WikiPost {
  id: ID! @id
  wtitle: String
  wcaption: String
  user: User! @relation(name: "WikiPostsOfUser")
  wikifiles: [WikiFile!]! @relation(name: "WikiFilesOfWikiPost", onDelete: CASCADE)
  text: String
  likes: [Like!]! @relation(name:"LikeOfWikiPost", onDelete: CASCADE)
  wikicomments: [WikiComment!]! @relation(name: "WikiCommentsOfWikiPost", onDelete: CASCADE)
  tags: [Tag!] @relation(name: "TagOfWikiPost", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Member {
  id: ID! @id
  memberName: String! @unique
  avatar: String @default (value: "https://iupac.org/wp-content/uploads/2018/05/default-avatar.png")
  mtag1: String
  mtag2: String
  mtag3: String
  memberTag: [MemberTag!]! @relation(name: "MemberTagOfMember")
  user: User! @relation(name: "MembersOfUser")
  files: [File!]! @relation(name: "FilesOfMember", onDelete: CASCADE)
  wikifiles: [WikiFile!]! @relation(name: "WikiFilesOfMember", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Like {
  id: ID! @id
  user: User! @relation(name:"LikesOfUser")
  post: Post @relation(name:"LikeOfPost")
  wikipost: WikiPost @relation(name:"LikeOfWikiPost")
  product: Product @relation(name:"LikeOfProduct")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Comment {
  id: ID! @id
  text: String!
  user: User! @relation(name: "CommentsOfUser")
  post: Post! @relation(name: "CommentsOfPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CommentProduct {
  id: ID! @id
  text: String!
  user: User! @relation(name: "CommentProductOfUser")
  product: Product! @relation(name: "CommentProductOfProduct")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type WikiComment {
  id: ID! @id
  text: String! 
  user: User! @relation(name: "WikiCommentOfUser")
  wikipost: WikiPost! @relation(name: "WikiCommentOfWikiPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Tag {
  id: ID! @id
  text: String!
  mainCategory: Boolean
  subCategory: Boolean
  post: Post @relation(name: "TagOfPost", onDelete: CASCADE)
  wiikiPost: WikiPost @relation(name: "TagOfWikiPost", onDelete: CASCADE)
  product: Product @relation(name: "TagOfProduct", onDelete: CASCADE)
  funding: Funding @relation(name: "TagOfFunding", onDelete: CASCADE)
}

type MemberTag {
  id: ID! @id
  text: String! 
  member: Member! @relation(name: "MemberTagOfMember")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type File {
  id: ID! @id
  url: String!
  post: Post @relation(name:"FilesOfPost")
  member: Member @relation(name:"FilesOfMember")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type WikiFile {
  id: ID! @id
  url: String!
  wikipost: WikiPost! @relation(name:"WikiFilesOfWikiPost")
  member: Member @relation(name:"WikiFilesOfMember")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Room {
  id: ID! @id
  participants: [User!]! 
  messages: [Message!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Message {
  id: ID! @id
  text: String!
  from: User! @relation(name: "From") 
  to: User! @relation(name: "To")
  room: Room!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Block {
  id: ID! @id
  creator: User! @relation(name:"Creator")
  funding: Funding! @relation(name:"BlockOfFunding", onDelete:CASCADE)
  collectors: [User!]! @relation(name:"Collectors")
  seats: [Seat] @scalarList(strategy: RELATION)
  seatValue: [Int] @scalarList(strategy: RELATION)
  seatNum: Int!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Seat {
  id: ID! @id
  number: Int
  user: User @relation(name:"SeatOfUser")
  block: Block!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Contract {
  id: ID! @id
  contentName: String
  funding: Funding @relation(name:"ContractOfFunding")
  title: String!
  text: String!
  creator: User! @relation(name:"ContractOfUser")
  collector: [User] @relation(name:"ContractOfCollector")
  condition: [Condition] @relation(name:"ConditionOfContract")
  createdAt: DateTime! @createdAt
}

type Condition {
  id: ID! @id
  title: String!
  text: String!
  contract: Contract! @relation(name:"ConditionOfContract")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Account {
  id: ID! @id
  user: User! @relation(name: "AccountOfUser")
  bank: String!
  account: Float!
}